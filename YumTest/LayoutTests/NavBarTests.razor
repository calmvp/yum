@inherits TestContext
@using Yum.Components.Layout
@using System.IO

@code {
    private readonly bool _generateMode =
       Environment.GetEnvironmentVariable("GENERATE_SNAPSHOTS") == "true";
    private Mock<ICartLineItemRepository> _mockCartLineRepo;
    private Mock<SharedStateService> _mockSharedStateService;
    private IRenderedComponent<NavBar> _cut;
    private string SomeUserEmail = "testguy@gmail.com";
    private string SomeUserId = Guid.NewGuid().ToString();
    private int SomeCartItemCount = 7;
    private int SomeOtherCartItemCount = 6;

    public NavBarTests()
    {
        _mockCartLineRepo = new Mock<ICartLineItemRepository>();
        _mockSharedStateService = new Mock<SharedStateService>();

        _mockCartLineRepo.Setup(m => m.GetActiveCartItemCount(SomeUserId)).ReturnsAsync(SomeCartItemCount);

        Services.AddScoped<ICartLineItemRepository>(_ => _mockCartLineRepo.Object);
        Services.AddScoped<SharedStateService>(_ => _mockSharedStateService.Object);
    }

    [Fact]
    public void DisplaysARegisterNavLinkToUnauthorizedUser()
    {
        GivenUserNotAuthorized();
        WhenRenderComponent();
        ThenContainsOneNavLinkWithHref("account/register");
    }

    [Fact]
    public void DisplaysALoginNavLinkToUnauthorizedUser()
    {
        GivenUserNotAuthorized();
        WhenRenderComponent();
        ThenContainsOneNavLinkWithHref("account/login");
    }

    [Fact]
    public void DoesNotDisplayACartLinkToUnauthorizedUser()
    {
        GivenUserNotAuthorized();
        WhenRenderComponent();
        ThenDoesNotContainNavLinkWithHref("/cart");
    }

    [Fact]
    public void DoesNotDisplayAOrderListLinkToUnauthorizedUser()
    {
        GivenUserNotAuthorized();
        WhenRenderComponent();
        ThenDoesNotContainNavLinkWithHref("/orders/list");
    }

    [Fact]
    public void DisplaysACartLinkToAuthorizedUser()
    {
        GivenUserAuthorized();
        WhenRenderComponent();
        ThenContainsOneNavLinkWithHref("/cart");
    }

    [Fact]
    public void DisplaysAnOrderListLinkToAuthorizedUser()
    {
        GivenUserAuthorized();
        WhenRenderComponent();
        ThenContainsOneNavLinkWithHref("/orders/list");
    }

    [Fact]
    public void DisplaysTheAuthorizedUsersEmail()
    {
        GivenUserAuthorized();
        WhenRenderComponentWithUserEmail();
        ThenDisplaysTheUserEmail();
    }

    [Fact]
    public void DoesNotDisplayARegisterLinkToAnAuthorizedUser()
    {
        GivenUserAuthorized();
        WhenRenderComponent();
        ThenDoesNotContainNavLinkWithHref("account/register");
    }

    [Fact]
    public void DoesNotDisplayALoginLinkToAnAuthorizedUser()
    {
        GivenUserAuthorized();
        WhenRenderComponent();
        ThenDoesNotContainNavLinkWithHref("account/login");
    }

    [Fact]
    public void DisplaysAnAuthorizedUsersCartItemCount()
    {
        GivenUserAuthorized();
        WhenRenderComponent();
        ThenDisplaysCartItemCount();
    }

    [Fact]
    public void DisplaysAnUpdatedCartItemCount()
    {
        GivenUserAuthorized();
        WhenRenderComponent();
        WhenCartCountChanges();
        ThenDisplaysNewCartItemCount();
    }

    [Fact]
    public void MatchesAcceptedUnauthorizedNavbar()
    {
        GivenUserNotAuthorized();
        WhenRenderComponent();
        ThenMatchesApproved("UnauthorizedNavBar");
    }

    [Fact]
    public void MatchesAcceptedAuthorizedNavBar()
    {
        GivenUserAuthorized();
        WhenRenderComponentWithUserEmail();
        ThenMatchesApproved("AuthorizedNavBar");
    }

    // [Fact]
    // public void GenerateUnauthorizedSnapshot()
    // {
    //     GivenUserNotAuthorized();
    //     WhenRenderComponent();
    //     var rawOutput = _cut.Markup;
    //     var wrappedMarkup = SnapshotHelper.WrapWithStyles(rawOutput);

    //     string sCurrentDirectory = AppDomain.CurrentDomain.BaseDirectory;
    //     string sFile = System.IO.Path.Combine(sCurrentDirectory, @"..\..\..\Snapshots\Raw\UnauthorizedNavBar.html");
    //     string sFilePath = Path.GetFullPath(sFile);
    //     File.WriteAllText(sFilePath, wrappedMarkup);
    // }

    // [Fact]
    // public void GenerateAuthorizedSnapshot()
    // {
    //     GivenUserAuthorized();
    //     WhenRenderComponentWithUserEmail();
    //     var rawOutput = _cut.Markup;

    //     string sCurrentDirectory = AppDomain.CurrentDomain.BaseDirectory;
    //     string sFile = System.IO.Path.Combine(sCurrentDirectory, @"..\..\..\Snapshots\Raw\AuthorizedNavBar.html");
    //     string sFilePath = Path.GetFullPath(sFile);
    //     File.WriteAllText(sFilePath, rawOutput);
    // }

    private void GivenUserNotAuthorized()
    {
        this.AddTestAuthorization();
    }

    private void GivenUserAuthorized()
    {
        var authContext = this.AddTestAuthorization();
        authContext.SetAuthorized(SomeUserEmail);
    }

    private void WhenRenderComponent()
    {
        _cut = RenderComponent<NavBar>(parameters => parameters.Add(p => p.userId, SomeUserId));
    }

    private void WhenRenderComponentWithUserEmail()
    {
        _cut = RenderComponent<NavBar>(parameters => parameters
            .Add(p => p.email, SomeUserEmail));
    }

    private void WhenCartCountChanges()
    {
        _mockSharedStateService.Object.TotalCartCount = SomeOtherCartItemCount;
    }

    private void ThenContainsOneNavLinkWithHref(string expectedHref)
    {
        var navs = _cut.FindAll("a.nav-link");
        var links = navs.Where(i => (i as IHtmlAnchorElement).Href.ToLower().Contains(expectedHref));
        Assert.Equal(1, links.Count());
    }

    private void ThenDoesNotContainNavLinkWithHref(string href)
    {
        var navs = _cut.FindAll("a.nav-link");
        var link = navs.FirstOrDefault(i => (i as IHtmlAnchorElement).Href.ToLower().Contains(href));
        Assert.Null(link);
    }

    private void ThenDisplaysTheUserEmail()
    {
        var navs = _cut.FindAll("a.nav-link");
        var links = navs.Where(i => i.TextContent.ToLower().Contains(SomeUserEmail));
        Assert.Equal(1, links.Count());
    }

    private void ThenDisplaysCartItemCount()
    {
        var navs = _cut.FindAll("a.nav-link");
        var link = navs.FirstOrDefault(i => (i as IHtmlAnchorElement).Href.ToLower().Contains("cart"));
        Assert.True(link.TextContent.Contains($"({SomeCartItemCount})"));
    }

    private void ThenDisplaysNewCartItemCount()
    {
        var navs = _cut.FindAll("a.nav-link");
        var link = navs.FirstOrDefault(i => (i as IHtmlAnchorElement).Href.ToLower().Contains("cart"));
        Assert.True(link.TextContent.Contains($"({SomeOtherCartItemCount})"));
    }

    private void ThenMatchesApproved(string name)
    {
        string sCurrentDirectory = AppDomain.CurrentDomain.BaseDirectory;
        string sFile = System.IO.Path.Combine(sCurrentDirectory, @$"..\..\..\Snapshots\Raw\{name}.html");
        string sFilePath = Path.GetFullPath(sFile);
        if (!File.Exists(sFilePath))
        {
            throw new InvalidOperationException(
                $"No approved snapshot for {name}. Run in generate mode first.");
        }

        var approved = File.ReadAllText(sFilePath);
        _cut.MarkupMatches(approved);
    }
}