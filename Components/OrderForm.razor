@using System.Globalization
@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navManager
@inject IOrderService _orderService

<div class="card">
	<div class="card-header text-success text-center display-6">
		Pickup Details
	</div>
	<EditForm Model="OrderRequest" FormName="OrderForm" OnValidSubmit="CreateOrderAsync">

		<div class="card-body">
			<div class="form-group">
				<label>Order Name</label>
				<InputText @bind-Value="OrderRequest.OrderName" class="form-control" />
				<ValidationMessage For="@(() => OrderRequest.OrderName)" />
			</div>
			<div class="form-group">
				<label>Email</label>
				<InputText @bind-Value="OrderRequest.Email" class="form-control" />
				<ValidationMessage For="@(() => OrderRequest.Email)" />
			</div>
			<div class="form-group">
				<label>Phone</label>
				<InputText @bind-Value="OrderRequest.PhoneNumber" class="form-control" />
				<ValidationMessage For="@(() => OrderRequest.PhoneNumber)" />
			</div>

			<div class="card mt-4 bg-light">
				<div class="card-body">
					<h4>
						Grand Total: @CartTotal
					</h4>
					<h4>
						No. of Items: @CartItemCount
					</h4>
				</div>

			</div>
		</div>
		<button class="btn btn-success m-4">
			Looks Good? Place Order!
		</button>
	</EditForm>
</div>

@code {
	[Parameter]
	public EventCallback<bool> OnLoading { get; set; }

	[SupplyParameterFromForm]
	public CreateOrderRequest OrderRequest { get; set; } = new CreateOrderRequest();

	[CascadingParameter(Name ="userId")]
	public string userId { get; set; }

	[Parameter]
	public IEnumerable<CartLineItem> CartLineItems { get; set; }

	private string CartTotal { get { return CartLineItems.Sum(c => c.Total).ToString("C", CultureInfo.GetCultureInfo("en-us")); } }

	private int CartItemCount { get { return CartLineItems.Sum(c => c.Count); } }

	protected override async Task OnInitializedAsync()
	{
		var authState = await _authStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

	}

	public async Task CreateOrderAsync()
	{
		OnLoading.InvokeAsync(true);
		OrderRequest.Items = CartLineItems;
		var createdOrder = await _orderService.CreateOrderAsync(userId, OrderRequest);
		_navManager.NavigateTo($"/order/confirmation/{createdOrder.OrderKey}");
	}
}
