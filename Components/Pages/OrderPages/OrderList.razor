@page "/orders/list"
@using System.Globalization
@inject IJSRuntime _jsRuntime
@inject IOrderRepository _orderRepo
@inject NavigationManager _navManager

@if (Loading)
{
    <Loading></Loading>
}
else
{
    @if (Orders.Any())
    {
        <div class="card shadow border-0 mt-4">
            <div class="card-header bg-black bg-gradient m-lg-0 py-3">
                <div class="row">
                    <div class="col-12 text-center">
                        <h2 class="text-white py-2">Order List</h2>
                    </div>
                </div>
            </div>
            <div class="card-body p-4">
                @if (Orders.Any())
                {
                    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                    Data="@Orders" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
                        <Columns>
                            <RadzenDataGridColumn Property="OrderKey" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
                            <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" Width="160px" />
                            <RadzenDataGridColumn Property="PhoneNumber" Title="Phone Number" Width="120px" />
                            <RadzenDataGridColumn Property="Email" Title="Email" Width="200px" />
                            <RadzenDataGridColumn Property="OrderTotal" Title="Order Total" FormatString="{0:C}" Width="120px" />
                            <RadzenDataGridColumn Property="OrderDate" Title="Order Date" FormatString="{0:d}" Width="160px" />
                            <RadzenDataGridColumn Property="Status" Title="Status" Width="160px" />
                            <RadzenDataGridColumn Title="Action" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center" >
                                <Template Context="order">
                                    <RadzenButton Shade="Shade.Lighter" Text="Details" ButtonStyle="ButtonStyle.Primary"
                                              Click="@(()=>_navManager.NavigateTo($"orders/details/{order.OrderKey}"))"></RadzenButton>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                }
            </div>
        </div>
    }
    else
    {
        <div class="p-4">
            <div class="alert alert-warning">
                No current orders
            </div>
        </div>
    }
}

@code {
    [CascadingParameter(Name="isAdmin")]
    public bool isAdmin { get; set; }
    [CascadingParameter(Name="userId")]
    public string userId { get; set; }
    private const string DELETE_MODAL_ID = "deleteModal";
    public bool Loading { get; set; } = true;
    private IEnumerable<Order> Orders { get; set; } = new List<Order>();
    private int DeleteOrderId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (isAdmin)
            {
                Orders = await GetOrdersAsync();
            }
            else
            {
                Orders = await GetOrdersAsync(userId);
            }

            Loading = false;
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<Order>> GetOrdersAsync(string? userId = null)
    {
        if (userId is null && isAdmin)
        {
            return await _orderRepo.GetAllAsync();
        }

        return await _orderRepo.GetAllAsync(userId);
    }

    private async Task OpenDeleteModal(int id)
    {
        DeleteOrderId = id;
        await _jsRuntime.OpenModal(DELETE_MODAL_ID);
    }

    private async Task ConfirmDelete()
    {
        // Loading = true;
        // await _jsRuntime.CloseModal(DELETE_MODAL_ID);
        // if (DeleteOrderId > 0)
        // {
        //     var res = await _categoryRepo.DeleteAsync(DeleteOrderId);
        //     if (res)
        //     {
        //         await _jsRuntime.ToastrSuccess("Order deleted successfully");
        //     }
        //     else
        //     {
        //         await _jsRuntime.ToastrError("Order delete failed");
        //     }


        //     Categories = await GetCategories();
        // }

        // DeleteOrderId = 0;
        // Loading = false;
    }
}