@page "/"
@implements IDisposable
@inject ICategoryRepository _categoryRepo
@inject IProductRepository _productRepo
@using System.Reactive.Subjects
@using System.Reactive.Linq

@if (Loading)
{
    <Loading></Loading>
}
else
{
    <div class="container-fluid px-0 m-0 full-width">
        <div class="jumbotron-custom">
            <div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">

                <div class="d-flex align-items-center" style="width: 100%;">
                    @*                <input type="text" class="form-control rounded-pill"
                    placeholder="Search for Food Items!"
                    style="width: 100%; padding: 20px;"
                    @oninput="@((e) => FilterProductsByName(e))"
                    > *@
                    <input type="text" class="form-control rounded-pill"
                    placeholder="Search for Food Items!"
                    style="width: 100%; padding: 20px;"
                    @oninput="@HandleInput"
                    >
                    <span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
                </div>
            </div>
        </div>

        <div class="content px-4 m-2">
            <ul class="nav nav-underline justify-content-center mb-2">
                <li class="nav-item" @onclick="@(() => FilterProductsByCategory())">
                    <span class="nav-link @GetActiveTabClass()" href="#" style="cursor: pointer">All</span>
                </li>
                @foreach(var category in Categories)
                {
                    <li class="nav-item" @onclick="@(() => FilterProductsByCategory(category.Id))">
                        <span class="nav-link @GetActiveTabClass(category.Id)" href="#" style="cursor: pointer">@category.Name</span>
                    </li>
                }
            </ul>
            <div class="row mt-4 mx-1">
                @if (countQueryable.Count() > 0)
                {
                    foreach(var product in productsQueryable.ToList())
                    {
                        <ProductTile Product="@product"></ProductTile>
                    }
                }

                <nav aria-label="Page navigation example">
                    <ul class="pagination">
                        @if (_page > 1)
                        {
                            <li class="page-item"><button class="page-link" @onclick="@(() => @ChangePage(_page - 1))">Previous</button></li>
                        }

                        @for (int i = 1; i <= _pageCount; i++)
                        {
                            var j = i;
                            <li class="page-item">
                                <button class="page-link @((i) == _page ? "active" : "")"
                                @onclick="@(() => ChangePage(j))"
                                >
                                    @(j)
                                </button>
                            </li>
                        }
                        @if (_page < _pageCount)
                        {
                            <li class="page-item">
                                <button class="page-link"
                                @onclick="@(() => @ChangePage(_page + 1))"
                                >Next</button>
                            </li>   
                        }
                    </ul>
                </nav
            </div>
        </div>
    </div>
}

@code{
    private IEnumerable<Category> Categories = new List<Category>();
    private bool Loading { get; set; } = true;
    private int _selectedCategoryId;
    private string _searchText = string.Empty;
    private int _page = 1;
    private int _pageSize = 3;
    private int _pageCount = 0;
    private IQueryable<Product> productsQueryable;
    private IQueryable<Product> countQueryable;
    private readonly Subject<string> _searchSubject = new();
    private IDisposable? _subscription;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        countQueryable = _productRepo.GetProductsQueryable();
        productsQueryable = countQueryable.Skip(0).Take(_pageSize);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Categories = await GetCategories();
            Loading = false;
            _pageCount = GetPageCount();
            _subscription = _searchSubject
                .Throttle(TimeSpan.FromMilliseconds(300))
                .DistinctUntilChanged()
                .Subscribe(val =>
                {
                    _searchText = val.ToString();
                    ChangePage();
                    InvokeAsync(StateHasChanged);
                });
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<Category>> GetCategories()
    {
        return await _categoryRepo.GetAllAsync();
    }

    private void FilterProductsByCategory(int categoryId = 0)
    {
        _selectedCategoryId = categoryId;
        ChangePage();
    }


    private void FilterProductsByName(ChangeEventArgs changeEventArgs)
    {
        _searchText = changeEventArgs.Value as string;
        ChangePage();
    }

    private string GetActiveTabClass(int categoryId = 0)
    {
        return categoryId == _selectedCategoryId ? "active" : string.Empty;
    }

    private int GetPageCount()
    {
        return (int)Math.Ceiling((double)countQueryable.Count() / _pageSize);
    }

    private void HandleInput(ChangeEventArgs e)
    {
        var searchInput = e.Value?.ToString();
        if (searchInput != null)
        {
            _searchSubject.OnNext(searchInput);
        }
    }

    private void ChangePage(int page=1)
    {
        _page = page;
        int? categoryId = _selectedCategoryId > 0 ? _selectedCategoryId : null;
        string? searchText = !string.IsNullOrWhiteSpace(_searchText) ? _searchText: null;

        countQueryable = _productRepo.GetProductsQueryable(categoryId, searchText);
        var offset = (page - 1) * _pageSize;
        _pageCount = GetPageCount();
        productsQueryable = countQueryable.Skip(offset).Take(_pageSize);
    }

    public void Dispose()
    {
        _subscription?.Dispose();
        _searchSubject.OnCompleted();
        _searchSubject.Dispose();
    }
}