@page "/cart"
@using System.Globalization
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navManager
@inject IProductRepository _productRepo
@inject ICategoryRepository _categoryRepo
@inject ICartLineItemRepository _cartLineItemRepo

@if (Loading)
{
	<Loading></Loading>
}
else
{
	@if (CartLineItems.Any())
	{


		<div class="row w-100">
			<div class="col-lg-6 col-12">
				<div class="container p-4 m-2">
					<h4 class="text-center text-success display-6">
						Cart Summary
					</h4>
					@foreach (var item in CartLineItems)
					{
						<CartItem LineItem="@item" OnItemUpdate="UpdateCartLineItem"></CartItem>
					}
				</div>
			</div>
			<div class="col-lg-6 col-12 p-4">
				<OrderForm CartLineItems="@CartLineItems"></OrderForm>
			</div>
		</div>
	}
	else
	{
		<div class="p-4">
			<div class="alert alert-warning">
				Your cart is empty!
			</div>
		</div>
	}
}

@code {
	[CascadingParameter]
	private bool isAuthenticated { get; set; }

	[CascadingParameter(Name ="userId")]
	private string userId { get; set; }

	private IEnumerable<CartLineItem> CartLineItems { get; set; } = new List<CartLineItem>();

	private bool Loading { get; set; } = true;


	protected override async Task OnInitializedAsync()
	{
		if (!isAuthenticated)
		{
			_navManager.NavigateTo("account/login", true);
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			CartLineItems = await GetCartLineItemsAsync();
			Loading = false;
			StateHasChanged();
		}
	}

	private async Task<IEnumerable<CartLineItem>> GetCartLineItemsAsync()
	{
		return await _cartLineItemRepo.GetAllUserItemsAsync(userId);
	}

	public async Task UpdateCartLineItem((int productId, int increment) args)
	{
		var result = await _cartLineItemRepo.UpdateCartAsync(userId, args.productId, args.increment);

		if (result)
		{
			var lineItem = CartLineItems.FirstOrDefault(i => i.ProductId == args.productId);

			if (lineItem.Count <= 0)
			{
				CartLineItems = await GetCartLineItemsAsync();
			}

			var productName = lineItem?.Product?.Name;

			await _jsRuntime.ToastrSuccess(args.increment > 0 ? $"{productName} added to cart" : $"{productName} removed from cart");
		}
		else
		{
			await _jsRuntime.ToastrError("Error updating item in cart");
		}

		StateHasChanged();
	}
}
