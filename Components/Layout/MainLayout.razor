@using System.Security.Claims
@inherits LayoutComponentBase
@inject AuthenticationStateProvider _authenticationStateProvider

<div class="page">
    <AuthorizeView Roles="@Roles.Admin">
        <div class="sidebar">
            <NavMenu />
        </div>
    </AuthorizeView>

    <main>
        @if (showNavBar)
        {
            <NavBar email="@email" userId="@userId"></NavBar>
        }
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            <CascadingValue Value="@isAuthenticated">
                <CascadingValue Name="userId" Value="@userId">
                    <CascadingValue Name="email" Value="@email">
                        <CascadingValue Name="isAdmin" Value="@isAdmin">
                        @Body
                        </CascadingValue>
                    </CascadingValue> 
                </CascadingValue>
            </CascadingValue>
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool showNavBar;
    private bool isAdmin;
    private bool isAuthenticated;
    private string userId;
    private string email;
    bool IsAuthenticated { get { return UserAuthenticated().Result; }}

    protected override async Task OnInitializedAsync()
    {
        await SetUserContextAsync();
    }

    private async Task<bool> GetNavBarVisibleAsync(ClaimsPrincipal user)
    {
        if (!isAuthenticated)
            return true;

        if (user is not null && !user.IsInRole(Roles.Admin))
        {
            return true;
        }

        return false;
    }

    private async Task<bool> UserAuthenticated(ClaimsPrincipal? user = null)
    {
        if (user is null)
        {
            var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            user = authState.User;
        }

        return (user is not null && user.Identity is not null && user.Identity.IsAuthenticated);
    }

    private async Task SetUserContextAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user is not null)
        {
            isAuthenticated = user is not null && user.Identity is not null && user.Identity.IsAuthenticated;
            isAdmin = user.IsInRole(Roles.Admin);
            userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
        }
        showNavBar = await GetNavBarVisibleAsync(user);
    }
}